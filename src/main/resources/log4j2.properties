appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
#appender.console.layout.pattern = =%d [%t] %-5p %c - %m%n
#appender.console.layout.pattern = =[%t] %C - %m%n
#for debugging in development
appender.console.layout.pattern = [%t] %-5p %C{1}.%M() - %m%n

#####################################
### JDBC Pool Metric Appender - BEGIN

##
## We Define the JDBC Appender for the pool metrics
##
appender.db.type = JDBC
appender.db.name = dbLogsStore

## Performance winner:  ask to batch log events before flushing them
appender.db.bufferSize = 20

##
## The filter ensures that we route "POOL" messages to this appender
##
# Multiple filters should return NEUTRAL in order for the filter chain to continue. (The last filter could be DENY/ACCEPT)
appender.db.filter.1.type = MarkerFilter
appender.db.filter.1.onMismatch=DENY
appender.db.filter.1.onMatch=ACCEPT
appender.db.filter.1.marker=POOL

#appender.db.filter.2.type = MarkerFilter
#appender.db.filter.2.onMismatch=DENY
#appender.db.filter.2.onMatch=ACCEPT
#appender.db.filter.2.marker=POOLDETAIL

appender.db.tableName = EVENT_LOGS
appender.db.cf.type = ConnectionFactory
appender.db.cf.class = org.example.LogDBConnectionFactory
appender.db.cf.method = getConnection


##
## Column Mappings
##
#appender.db.columnConfigs[0].type = Column
#appender.db.columnConfigs[0].name = ID
#appender.db.columnConfigs[0].pattern =%K{ID}
appender.db.columnConfigs[0].type = Column
appender.db.columnConfigs[0].name = TextField1
appender.db.columnConfigs[0].pattern =%K{field1}
#appender.db.columnConfigs[2].type = Column
#appender.db.columnConfigs[2].name = DateField2
#appender.db.columnConfigs[2].pattern =%K{field2}
#appender.db.columnConfigs[2].timestamp = true
#appender.db.columnConfigs[3].type = Column
#appender.db.columnConfigs[3].name = DATE_TIME
#appender.db.columnConfigs[3].literal =CURRENT_TIMESTAMP

# Root logger level  ----  WORKS  ----
#rootLogger.level = debug
## Root logger referring to database appender
#rootLogger.appenderRef.db.ref = dbLogsStore
#rootLogger.appenderRef.console.ref = STDOUT


#    WORKs but you must put CONSOLE BEFORE DATABASE. YOU SEE IN CONSOLE BUT NO RECORDS INSERTED IN DATABASE
#logger.namea.name                    = org.example
#logger.namea.level                   = debug
#logger.namea.appenderRef.db.ref = dbLogsStore
#logger.nameb.name                    = org.example
#logger.nameb.level                   = debug
#logger.nameb.appenderRef.console.ref = STDOUT
## MUST PUT CONSOLE BEFORE DATABASE
#loggers = nameb,namea

# https://howtodoinjava.com/log4j2/log4j2-properties-example/
# Root logger referring to console appender
#rootLogger.appenderRef.stdout.ref = consoleLogger
# Root logger referring to rolling file appender
#rootLogger.appenderRef.rolling.ref = fileLogger

# WORKS
rootLogger.level = debug
appender.async.type = Async
appender.async.name = Async
appender.async.appenderRef.type = AppenderRef
appender.async.appenderRef.ref = dbLogsStore
rootLogger.appenderRef.async.ref = Async
rootLogger.appenderRef.console.ref = STDOUT
